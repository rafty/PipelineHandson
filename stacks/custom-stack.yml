AWSTemplateFormatVersion: 2010-09-09
Description: Custom Stack

Parameters:
  LambdaAMIInfoRoleArn:
    Type: String

Resources:
  LambdaAMIInfo:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function
          import botocore.exceptions
          import cfnresponse
          import boto3
          def handler(event, context):
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              response_data = {}
              filters = [
                  {'Name': 'architecture', 'Values': ['x86_64']},
                  {'Name': 'root-device-type', 'Values': ['ebs']},
                  {'Name': 'name', 'Values': ['amzn-ami-hvm-*']},
                  {'Name': 'virtualization-type', 'Values': ['hvm']},
                  {'Name': 'block-device-mapping.volume-type', 'Values': ['gp2']}]
              try:
                  images = boto3.client('ec2').describe_images(Owners=['amazon'], Filters=filters)
              except botocore.exceptions.ClientError as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  for i in sorted([image for image in images['Images']], key=lambda x: x['Name']):
                      if i['Name'].lower().count('beta') > 0 or i['Name'].lower().count('.rc') > 0:
                          continue
                      response_data['Id'] = i['ImageId']
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
      Handler: index.handler
      Role: !Ref LambdaAMIInfoRoleArn
      Runtime: python2.7
      Timeout: 60
  CustomAMIInfo:
    Type: Custom::AMIInfo
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaAMIInfo.Arn

Outputs:
  ImageId:
    Value: !GetAtt CustomAMIInfo.Id